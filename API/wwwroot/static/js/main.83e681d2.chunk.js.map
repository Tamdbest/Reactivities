{"version":3,"sources":["app/models/activity.ts","app/models/pagination.ts","app/api/agent.ts","app/models/profiles.ts","app/store/activityStore.ts","app/store/commentStore.ts","app/store/commonStore.ts","app/store/modalStore.ts","app/store/profileStore.ts","app/store/userStore.ts","app/store/store.ts","app/layout/Navbar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profile/FollowButton.tsx","features/profile/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profile/ProfileEditForm.tsx","features/profile/ProfileAbout.tsx","features/profile/ProfileActivities.tsx","features/profile/ProfileFollowings.tsx","app/common/imageUpload/photoWidgetCropper.tsx","app/common/imageUpload/photoWidgetDropzone.tsx","app/common/imageUpload/photoUploadWidget.tsx","features/profile/ProfilePhotos.tsx","features/profile/ProfileContent.tsx","features/profile/ProfileHeader.tsx","features/profile/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["Activity","val","Object","assign","this","ActivityFormValues","activity","id","undefined","title","category","description","date","city","venue","PaginatedResult","data","pagination","PagingParams","pageNumber","pageSize","sleep","delay","Promise","resolve","setTimeout","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setError","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","getone","create","update","attend","Account","getcurruser","login","obj","register","Profiles","username","edit","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","follow","getFollowings","predicate","getUserActivities","Profile","user","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","loading","submitting","pagingParams","set","setLoading","state","setPredicate","value","resetPredicate","forEach","setPagingParams","cancelSelection","setSubmitting","loadActivity","getActivity","setActivity","runInAction","console","log","getActivities","axiosParams","x","setPagination","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","Date","updateAttendance","filter","newProfile","cancelActivityToggle","isCancelled","createActivity","attendee","newActivity","editActivity","updatedActivity","deleteActivity","followOrUnfollow","y","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","a","b","getTime","entries","ActivitiesByDate","reduce","activities","format","CommentStore","comments","hubConnection","stopHubConnection","stop","catch","clearComments","createHubConnection","activityId","activityStore","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","on","createdAt","comment","unshift","addComment","invoke","CommonStore","window","localStorage","getItem","apploaded","err","setToken","tok","setItem","setAppLoaded","ModalStore","modal","open","openModal","content","closeModal","ProfileStore","profile","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","loadUserActivities","acts","loadProfile","photo","photos","isMain","setImage","updateProfile","setDisplayName","bio","setActiveTab","updateFollowing","followingCount","loadFollowing","UserStore","info","modalStore","logout","removeItem","getLoggedInUser","profileStore","commentStore","StoreContext","createContext","Store","useContext","observer","Menu","inverted","fixed","Container","Item","exact","as","NavLink","to","header","src","alt","style","marginRight","name","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","basic","e","preventDefault","handleFollow","Card","Description","length","slice","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Segment","Group","Label","textAlign","marginBottom","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","LoadingComponent","Dimmer","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","i","validationSchema","Yup","required","dirty","isValid","isLoggedIn","border","resetForm","rows","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","relaxed","divided","Extra","useParams","MyTextArea","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","SetActivity","nullable","enableReinitialize","uuid","handleFormSubmit","placeholderText","showTimeSelect","timeCaption","dateFormat","TestErrors","widths","primary","NotFound","Inline","message","details","Modal","onClose","editMode","isCurrentUser","setEditMode","Tab","Pane","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","Statistic","Divider","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ProfilePage","ActivityForm","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","createRoot","document","getElementById","Provider"],"mappings":"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","file":"static/js/main.83e681d2.chunk.js","sourcesContent":["import { Profile } from \"./profiles\";\r\n\r\nexport interface Activity {\r\n  id: string;\r\n  title: string;\r\n  date: Date | null;\r\n  description: string;\r\n  category: string;\r\n  city: string;\r\n  venue: string;\r\n  hostUsername: string;\r\n  isCancelled: boolean;\r\n  isGoing: boolean;\r\n  isHost: boolean;\r\n  host?: Profile;\r\n  attendees: Profile[]\r\n  }\r\n  export class Activity implements Activity{\r\n    constructor(val:ActivityFormValues) {\r\n      Object.assign(this,val);\r\n    }\r\n  }\r\n\r\n  export class ActivityFormValues{\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    date: Date | null = null;\r\n    city: string = '';\r\n    venue: string = '';\r\n    constructor(activity?:ActivityFormValues){\r\n      if(activity){\r\n        this.id = activity.id;\r\n        this.title = activity.title;\r\n        this.category = activity.category;\r\n        this.description = activity.description;\r\n        this.date = activity.date;\r\n        this.venue = activity.venue;\r\n        this.city = activity.city;\r\n      }\r\n    }\r\n  }","\r\nexport interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from \"axios\";\r\nimport { request } from \"http\";\r\nimport { toast } from \"react-toastify\";\r\nimport { history } from \"../..\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { PaginatedResult, PagingParams } from \"../models/pagination\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profiles\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"../store/store\";\r\nimport UserStore from \"../store/userStore\";\r\n\r\nconst sleep=(delay:number)=>{\r\n    return new Promise(resolve=>{\r\n        setTimeout(resolve,delay);\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL=process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(config=>{\r\n    var token=store.commonStore.token;\r\n    if(token)\r\n        config.headers!.Authorization=`Bearer ${token}`;\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\n    await sleep(1000);\r\n    const pagination = response.headers['pagination'];\r\n    if (pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>\r\n    }\r\n    return response;\r\n}, (error: AxiosError) => {\r\n    const {data, status, config} = error.response!;\r\n    switch (status) {\r\n        case 400:\r\n            // if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n            //     history.push('/not-found');\r\n            // }\r\n            if(typeof data==='string'){\r\n                toast.error(data);\r\n            }\r\n            if(config.method==='get'&&data.errors.hasOwnProperty('id')){\r\n                history.push('/not-found');\r\n            }\r\n            if (data.errors) {\r\n                const modalStateErrors = [];\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        modalStateErrors.push(data.errors[key])\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            } \r\n            break;\r\n        case 401:\r\n            toast.error('unauthorised');\r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            break;\r\n        case 500:\r\n            store.commonStore.setError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n})\r\nconst responseBody=<T>(response:AxiosResponse<T>)=>response.data;\r\n\r\nconst requests={\r\n    get:<T>(url:string)=>axios.get<T>(url).then(responseBody),\r\n    post:<T>(url:string,body:{})=>axios.post<T>(url,body).then(responseBody),\r\n    put:<T>(url:string,body:{})=>axios.put<T>(url,body).then(responseBody),\r\n    del:<T>(url:string)=>axios.delete<T>(url).then(responseBody),\r\n}\r\n\r\nconst Activities={\r\n    list:(params:URLSearchParams)=>axios.get<PaginatedResult<Activity[]>>('/activities',{params}).then(responseBody),\r\n    getone:(id:string)=>requests.get<Activity>(`/activities/${id}`),\r\n    create:(activity:ActivityFormValues)=>requests.post<void>('/activities',activity),\r\n    update:(activity:ActivityFormValues)=>requests.put<void>(`/activities/${activity.id}`,activity),\r\n    delete:(id:string)=>requests.del<void>(`/activities/${id}`),\r\n    attend:(id:string)=>requests.post<void>(`/activities/${id}/attend`,{})\r\n}\r\nconst Account={\r\n    getcurruser:()=>requests.get<User>('/account'),\r\n    login:(obj:UserFormValues)=>requests.post<User>('/account/login',obj),\r\n    register:(obj:UserFormValues)=>requests.post<User>('/account/register',obj)\r\n}\r\nconst Profiles={\r\n    get:(username:string)=>requests.get<Profile>(`/profiles/${username}`),\r\n    edit:(obj:Partial<Profile>)=>requests.put<void>(`/profiles`,obj),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('/photos', formData, {\r\n            headers: {'Content-type': 'multipart/form-data'}\r\n        })\r\n    },\r\n    setMainPhoto:(id:string)=>requests.post(`/photos/${id}/setmain`,{}),\r\n    deletePhoto:(id:string)=>requests.del(`/photos/${id}`),\r\n    follow:(username:string)=>requests.post(`/follow/${username}`,{}),\r\n    getFollowings:(username:string,predicate:string)=>requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    getUserActivities:(username:string,predicate:string|null)=>requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n}\r\nconst agent={\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent;","import { User } from \"./user\";\r\n\r\nexport interface Profile{\r\n    username:string,\r\n    displayName:string,\r\n    bio?:string,\r\n    image?:string,\r\n    followersCount:number,\r\n    followingCount:number,\r\n    following:boolean,\r\n    photos?:Photo[]\r\n}\r\nexport class Profile implements Profile{\r\n    constructor(user:User){\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo{\r\n    id:string,\r\n    url:string,\r\n    isMain:boolean\r\n}\r\nexport interface UserActivity {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport {v4 as uuid} from 'uuid';\r\nimport {format} from 'date-fns';\r\nimport { store } from \"./store\";\r\nimport { Profile } from \"../models/profiles\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\nexport default class ActivityStore{\r\n    activityRegistry=new Map<string,Activity>();\r\n    //activityDateWiseRegistry=new Map<string,Activity[]>();\r\n    selectedActivity:Activity|undefined=undefined;\r\n    //editMode=false;\r\n    loading=false;\r\n    submitting=false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate=new Map().set('all',true);\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(()=>this.predicate.keys(),()=>{\r\n            this.pagingParams=new PagingParams();\r\n            this.activityRegistry.clear();\r\n            this.getActivities();\r\n        })\r\n    }\r\n\r\n    setLoading=(state:boolean)=>{\r\n        this.loading=state\r\n    }\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n        switch(predicate){\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set('all',true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost',true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing',true);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate',value);\r\n                break;\r\n        }\r\n    }\r\n    // openForm=(id?:string)=>{\r\n    //     id?this.selectActivity(id):this.cancelSelection();\r\n    //     this.editMode=true;\r\n    // }\r\n\r\n    // closeForm=()=>{\r\n    //     this.editMode=false;\r\n    // }\r\n\r\n    // selectActivity=(id:string)=>{\r\n    //     this.selectedActivity=this.activityRegistry.get(id);\r\n    // }\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value,key)=>{\r\n            if(key==='startDate'){\r\n                params.append('startDate',(value as Date).toISOString());\r\n            }\r\n            else{\r\n                params.append(key,value);\r\n            }\r\n        })\r\n        return params;\r\n    }\r\n    cancelSelection=()=>{\r\n        this.selectedActivity=undefined;\r\n    }\r\n\r\n    setSubmitting=(value:boolean)=>{\r\n        this.submitting=value;\r\n    }\r\n    get ActivitiesByDate(){\r\n        return Array.from(this.activityRegistry.values()).sort((a, b) => \r\n        a.date!.getTime() - b.date!.getTime());\r\n    }\r\n    get groupedActivities() {\r\n        return Object.entries(\r\n            this.ActivitiesByDate.reduce((activities, activity) => {\r\n                const date = format(activity.date!,'dd MMM yyyy');\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            }, {} as {[key: string]: Activity[]})\r\n        )\r\n    }\r\n    loadActivity=async(id:string)=>{\r\n        let activity=this.getActivity(id);\r\n        if(activity){\r\n            this.selectedActivity=activity;\r\n            return activity;\r\n        }\r\n        else{\r\n            this.loading=true;\r\n            try{\r\n                activity=await agent.Activities.getone(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                    this.loading=false;\r\n                })\r\n                return activity;\r\n            }\r\n            catch(err){\r\n                console.log(err);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                    this.loading=false;\r\n                })\r\n            }\r\n        }\r\n    }\r\n    getActivities=async ()=>{\r\n        this.setLoading(true);\r\n        try{\r\n            const response= await agent.Activities.list(this.axiosParams);\r\n            response.data.forEach(x=>{\r\n                this.setActivity(x);\r\n              });\r\n              this.setPagination(response.pagination);\r\n              this.setLoading(false);\r\n        }\r\n        catch(err){\r\n            console.log(err);\r\n            this.setLoading(false);\r\n        }\r\n    }\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n    private setActivity = (activity: Activity) => {\r\n        var user=store.userStore.user;\r\n        if(user){\r\n            activity.isGoing=activity.attendees.some(x=>x.username==user?.username);\r\n            activity.isHost=activity.hostUsername==user.username;\r\n            activity.host=activity.attendees.find(x=>x.username==activity.hostUsername);\r\n        }\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n    updateAttendance=async ()=>{\r\n        const user=store.userStore.user;\r\n        this.submitting=true;\r\n        try{\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(()=>{\r\n                if(this.selectedActivity?.isGoing){\r\n                    this.selectedActivity.attendees=this.selectedActivity.attendees.filter(x=>x.username!==user!.username);\r\n                    this.selectedActivity.isGoing=false;\r\n                }\r\n                else{\r\n                    const newProfile=new Profile(user!);\r\n                    this.selectedActivity?.attendees.push(newProfile);\r\n                    this.selectedActivity!.isGoing=true; \r\n                }\r\n                this.activityRegistry.set(this.selectedActivity!.id,this.selectedActivity!);\r\n            })\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.submitting = false);\r\n        }\r\n    }\r\n    cancelActivityToggle=async ()=>{\r\n        this.submitting=true;\r\n        try{\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(()=>{\r\n                this.selectedActivity!.isCancelled=!this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id,this.selectedActivity!);\r\n            })\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.submitting = false);\r\n        }\r\n    }\r\n    createActivity=async(activity:ActivityFormValues)=>{\r\n        this.setSubmitting(true);\r\n        //activity.id=uuid();\r\n        const user=store.userStore.user;\r\n        const attendee=new Profile(user!);\r\n        try{\r\n            await agent.Activities.create(activity);\r\n            runInAction(() => {\r\n                var newActivity=new Activity(activity);\r\n                newActivity.hostUsername=user!.username;\r\n                newActivity.attendees=[attendee];\r\n                this.activityRegistry.set(newActivity!.id, newActivity);\r\n                this.selectedActivity = newActivity;\r\n                //this.editMode = false;\r\n                this.submitting = false;\r\n            })\r\n        }\r\n        catch(err){\r\n            console.log(err);\r\n            runInAction(() => {\r\n                this.submitting = false;\r\n            })\r\n        }\r\n    }\r\n    editActivity=async(activity:ActivityFormValues)=>{\r\n        this.submitting=true;\r\n        try{\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                if(activity.id){\r\n                let updatedActivity={...this.getActivity(activity.id),...activity};\r\n                this.activityRegistry.set(activity.id, updatedActivity as Activity);\r\n                this.selectedActivity = this.activityRegistry.get(activity.id);\r\n                //this.editMode = false;\r\n                this.submitting = false;\r\n                }\r\n            })\r\n        }\r\n        catch(err){\r\n            console.log(err);\r\n            runInAction(() => {\r\n                this.submitting = false;\r\n            })\r\n        }\r\n    }\r\n    deleteActivity=async(id:string)=>{\r\n        this.submitting=true;\r\n        try{\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n                if(this.selectedActivity&&this.selectedActivity.id===id){\r\n                    this.selectedActivity=undefined;\r\n                }\r\n                this.submitting = false;\r\n            })\r\n        }\r\n        catch(err){\r\n            console.log(err);\r\n            runInAction(() => {\r\n                this.submitting = false;\r\n            })\r\n        }\r\n    }\r\n    followOrUnfollow=(username:string)=>{\r\n        this.activityRegistry.forEach(x=>{\r\n            x.attendees.forEach(y=>{\r\n                if(y.username===username){\r\n                    if(y.following){\r\n                        y.following=false;\r\n                        y.followersCount--;\r\n                    }\r\n                    else{\r\n                        y.following=true;\r\n                        y.followersCount++;\r\n                    }\r\n                }\r\n            })\r\n        })\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n    createHubConnection=(activityId:string)=>{\r\n        if(store.activityStore.selectedActivity){\r\n            this.hubConnection=new HubConnectionBuilder()\r\n                .withUrl(process.env.REACT_APP_CHAT_URL+'?activityId='+activityId,{\r\n                    accessTokenFactory:()=>store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n            this.hubConnection.start().catch(error => console.log('Error establishing the connection: ', error));\r\n        }\r\n        this.hubConnection?.on('LoadComments',(comments:ChatComment[])=>{\r\n            runInAction(()=>{\r\n                comments.forEach(x=>{x.createdAt=new Date(x.createdAt+'Z')})\r\n                this.comments=comments\r\n            })\r\n        });\r\n        this.hubConnection?.on('ReceiveComment',(comment:ChatComment)=>{\r\n            runInAction(()=>{\r\n                comment.createdAt=new Date(comment.createdAt)\r\n                this.comments.unshift(comment);\r\n            })\r\n        })\r\n    }\r\n    addComment=async(values:any)=>{\r\n        values.activityId=store.activityStore.selectedActivity?.id\r\n        try{\r\n            await this.hubConnection?.invoke('SendComment',values);\r\n        }\r\n        catch(err){\r\n            console.log(err);\r\n        }\r\n    }\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\nexport default class CommonStore{\r\n    error:ServerError|null=null;\r\n    token:string|null=window.localStorage.getItem('jwt');\r\n    apploaded:boolean=false;\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n        reaction(()=>this.token,token=>{})\r\n    }\r\n    setError=(err:ServerError)=>{\r\n        this.error=err;\r\n    }\r\n    setToken=(tok:string|null)=>{\r\n        if(tok)\r\n            window.localStorage.setItem('jwt',tok);\r\n        this.token=tok; \r\n    }\r\n    setAppLoaded=()=>{\r\n        this.apploaded=true;\r\n    }\r\n}","\r\nimport { makeAutoObservable } from \"mobx\"\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { Agent } from \"http\";\r\nimport { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profiles\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore{\r\n    profile:Profile|null=null;\r\n    loadingProfile=false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    loadingFollowings = false;\r\n    activeTab = 0;\r\n    userActivities:UserActivity[]=[];\r\n    loadingActivities=false;\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n        reaction(\r\n            () => this.activeTab,\r\n            activeTab => {\r\n                if (activeTab === 4 || activeTab === 3) {\r\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\r\n                    this.loadFollowing(predicate);\r\n                }\r\n                if(activeTab!==4&&activeTab!==3&&activeTab!==2) {\r\n                    this.followings = [];\r\n                    this.userActivities=[];\r\n                }\r\n            }\r\n        )\r\n    }\r\n    get isCurrentUser(){\r\n        if(this.profile&&store.userStore.user){\r\n            return this.profile.username===store.userStore.user.username;\r\n        }\r\n        return false;\r\n    }\r\n    loadUserActivities=async(username:string,predicate:string|null=null)=>{\r\n        this.loadingActivities=true;\r\n        try{\r\n            const acts=await agent.Profiles.getUserActivities(username,predicate);\r\n            runInAction(()=>{\r\n                this.userActivities=acts;\r\n                this.loadingActivities=false;\r\n            })\r\n        }\r\n        catch(err){\r\n            console.log(err);\r\n            runInAction(()=>{\r\n                this.loadingActivities=false;\r\n            })\r\n        }\r\n    }\r\n    loadProfile=async(username:string)=>{\r\n        this.loadingProfile=true;\r\n        try{\r\n            const profile=await agent.Profiles.get(username);\r\n            runInAction(()=>{\r\n                this.profile=profile;\r\n                this.loadingProfile=false;\r\n            })\r\n        }\r\n        catch(err){\r\n            console.log(err);\r\n            runInAction(()=>{\r\n                this.loadingProfile=false;\r\n            })\r\n        }\r\n    }\r\n    uploadPhoto=async(file:Blob)=>{\r\n        this.uploading=true;\r\n        try{\r\n            const response=await agent.Profiles.uploadPhoto(file);\r\n            var photo=response.data;\r\n            runInAction(()=>{\r\n                if(this.profile){\r\n                    this.profile.photos?.push(photo);\r\n                    if(photo.isMain&&store.userStore.user){\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image=photo.url;\r\n                    }\r\n                }\r\n                this.uploading=false;\r\n            })\r\n        }\r\n        catch (error) {   \r\n            console.log(error);\r\n            runInAction(() => this.uploading = false);\r\n        }\r\n    }\r\n    setMainPhoto=async (photo:Photo)=>{\r\n        this.loading=true;\r\n        try{\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(()=>{\r\n                if(this.profile){\r\n                    this.profile.photos!.find(x=>x.isMain)!.isMain=false;\r\n                    this.profile.photos!.find(x=>x.id==photo.id)!.isMain=true;\r\n                    this.profile.image=photo.url;\r\n                    this.loading=false;\r\n                }\r\n            })\r\n        }\r\n        catch (error) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(error);\r\n        }\r\n    }\r\n    deletePhoto=async(photo:Photo)=>{\r\n        this.loading=true;\r\n        try{\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(()=>{\r\n                if(this.profile){\r\n                    this.profile.photos=this.profile.photos?.filter(x=>x.id!==photo.id);\r\n                    this.loading=false;\r\n                }\r\n            })\r\n        }\r\n        catch (error) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(error);\r\n        }\r\n    }\r\n    updateProfile=async(profile:Partial<Profile>)=>{\r\n        this.loading=true;\r\n        try{\r\n            await agent.Profiles.edit(profile);\r\n            runInAction(()=>{\r\n                if (profile.displayName && profile.displayName !==\r\n                    store.userStore.user?.displayName) {\r\n                    store.userStore.setDisplayName(profile);\r\n                    }\r\n                    this.profile = {...this.profile, ...profile as Profile};\r\n                    store.activityStore.activityRegistry.forEach(x=>{\r\n                        x.attendees.forEach(y=>{\r\n                            if(y.username===profile.username){\r\n                                y.displayName=profile.displayName!\r\n                                if(profile.bio!==undefined||profile.bio!==\"\")\r\n                                     y.bio=profile.bio;\r\n                            }\r\n                        })\r\n                    })\r\n                    this.loading = false;\r\n                    })\r\n                    } catch (error) {\r\n                    console.log(error);\r\n                    runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n    updateFollowing=async (username:string,follow:boolean)=>{\r\n        this.loading=true;\r\n        try{\r\n            await agent.Profiles.follow(username);\r\n            store.activityStore.followOrUnfollow(username);\r\n            runInAction(()=>{\r\n                if(this.profile&&this.profile!.username!==store.userStore.user?.username&&this.profile.username===username){\r\n                    if(follow){\r\n                        this.profile!.followersCount++;\r\n                        this.profile.following=true;\r\n                    }\r\n                    else{\r\n                        this.profile!.followersCount--;\r\n                        this.profile!.following=false;\r\n                    }\r\n                }\r\n                if(this.profile?.username===store.userStore.user?.username){\r\n                    if(follow){\r\n                        this.profile!.followingCount++;\r\n                    }\r\n                    else{\r\n                        this.profile!.followersCount--;\r\n                    }\r\n                }\r\n                this.followings.forEach(x=>{\r\n                    if(x.username===username){\r\n                        if(follow){\r\n                            x.followersCount++;\r\n                            x.following=true;\r\n                        }\r\n                        else{\r\n                            x.followersCount--;\r\n                            x.following=false;\r\n                        }\r\n                    }\r\n                })\r\n                this.loading=false;\r\n            })\r\n        }\r\n        catch(err){\r\n            console.log(err);\r\n            runInAction(()=>{\r\n                this.loading=false;\r\n            })\r\n        }\r\n    }\r\n    loadFollowing=async(predicate:string)=>{\r\n        this.loadingFollowings=true;\r\n        try{\r\n            const followings=await agent.Profiles.getFollowings(this.profile!.username,predicate);\r\n            runInAction(()=>{\r\n                this.followings=followings;\r\n                this.loadingFollowings=false;\r\n            })\r\n        }\r\n        catch(err){\r\n            console.log(err)\r\n            runInAction(()=>{\r\n                this.loadingFollowings=false;\r\n            })\r\n        }\r\n    }\r\n}","import userEvent from \"@testing-library/user-event\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { Profile } from \"../models/profiles\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { Store, store } from \"./store\";\r\n\r\nexport default class UserStore{\r\n    user:User|null=null;\r\n    constructor() {\r\n        makeAutoObservable(this);  \r\n    }\r\n    get isLoggedIn(){\r\n        return !!this.user;\r\n    }\r\n    login=async (info:UserFormValues)=>{\r\n        try{\r\n            var user=await agent.Account.login(info)\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(()=>{\r\n                this.user=user;\r\n            })\r\n            store.modalStore.closeModal();\r\n            history.push('/activities');\r\n        }\r\n        catch(err){\r\n            //store.modalStore.closeModal();\r\n            throw err;\r\n        }\r\n    }\r\n    logout=()=>{\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user=null;\r\n        store.activityStore.activityRegistry.clear();\r\n        history.push('/');\r\n    }\r\n    register=async (info:UserFormValues)=>{\r\n        try{\r\n            var user=await agent.Account.register(info)\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(()=>{\r\n                this.user=user;\r\n            })\r\n            store.modalStore.closeModal();\r\n            history.push('/activities');\r\n        }\r\n        catch(err){\r\n            //store.modalStore.closeModal();\r\n            throw err;\r\n        }\r\n    }\r\n    getLoggedInUser=async ()=>{\r\n        try{\r\n            var user=await agent.Account.getcurruser();\r\n            runInAction(()=>{this.user=user})\r\n        }\r\n        catch(err){\r\n            console.log(err);\r\n        }\r\n    }\r\n    setImage = (image: string) => {\r\n        if (this.user) this.user.image = image;\r\n    }\r\n    setDisplayName=(obj:Partial<Profile>)=>{\r\n        if(this.user){\r\n            this.user.displayName=obj.displayName!;\r\n            this.user.bio=obj.bio;\r\n        }\r\n    } \r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store{\r\n    activityStore:ActivityStore\r\n    commonStore:CommonStore\r\n    userStore:UserStore\r\n    modalStore:ModalStore\r\n    profileStore:ProfileStore\r\n    commentStore:CommentStore\r\n}\r\n\r\nexport const store:Store={\r\n    activityStore : new ActivityStore(),\r\n    commonStore:new CommonStore(),\r\n    userStore:new UserStore(),\r\n    modalStore:new ModalStore(),\r\n    profileStore:new ProfileStore(),\r\n    commentStore:new CommentStore()\r\n}\r\n\r\nexport const StoreContext=createContext(store);\r\n\r\nexport function Store(){\r\n    return useContext(StoreContext);\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport { Button, Container, Dropdown, Image, Menu, MenuItem } from \"semantic-ui-react\";\r\nimport { Store } from \"../store/store\";\r\n// interface Props{\r\n//     openForm:()=>void;\r\n// }\r\nexport default observer(function NavBar(){\r\n    const{userStore:{user,logout}}=Store();\r\n    return(\r\n        <Menu inverted fixed=\"top\">\r\n            <Container>\r\n                <Menu.Item exact as={NavLink} to='/' header>\r\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{marginRight:'10px'}}/>\r\n                    Reactivities\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/activities' name=\"Activities\"/>\r\n                <Menu.Item as={NavLink} to='/errors' name='Errors' />\r\n                <Menu.Item>\r\n                    <Button as={NavLink} to='/create' positive content='Create Activity'/>\r\n                </Menu.Item>\r\n                <Menu.Item position='right'>\r\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\r\n                    <Dropdown pointing='top left' text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} \r\n                                text='My Profile' icon='user' />\r\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport { Header, Menu } from 'semantic-ui-react';\r\nimport { Store } from '../../../app/store/store';\r\n\r\nexport default observer(function ActivityFilters() {\r\n    const {activityStore: {predicate, setPredicate}} = Store();\r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{ width: '100%', marginTop: 25 }}>\r\n                <Header icon='filter' attached color='teal' content='Filters' />\r\n                <Menu.Item \r\n                    content='All Activites' \r\n                    active={predicate.has('all')}\r\n                    onClick={() => setPredicate('all', 'true')}\r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm going\" \r\n                    active={predicate.has('isGoing')}\r\n                    onClick={() => setPredicate('isGoing', 'true')}\r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm hosting\" \r\n                    active={predicate.has('isHost')}\r\n                    onClick={() => setPredicate('isHost', 'true')}    \r\n                />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar \r\n                onChange={(date:Date) => setPredicate('startDate', date as Date)}\r\n                value={predicate.get('startDate') || new Date()}\r\n            />\r\n        </>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent } from 'react';\r\nimport { Reveal, Button } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profiles';\r\nimport { Store } from '../../app/store/store';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({ profile }: Props) {\r\n    const {profileStore, userStore} = Store();\r\n    const {updateFollowing, loading} = profileStore;\r\n\r\n    if (userStore.user?.username === profile.username) return null;\r\n\r\n    function handleFollow(e: SyntheticEvent, username: string) {\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\r\n    }\r\n\r\n    return (\r\n        <Reveal animated='move'>\r\n            <Reveal.Content visible style={{ width: '100%' }}>\r\n                <Button \r\n                    fluid \r\n                    color='teal' \r\n                    content={profile.following ? 'Following' : 'Not following'} />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{ width: '100%' }}>\r\n                <Button\r\n                    fluid\r\n                    basic\r\n                    color={profile.following ? 'red' : 'green'}\r\n                    content={profile.following ? 'Unfollow' : 'Follow'}\r\n                    loading={loading}\r\n                    onClick={(e) => handleFollow(e, profile.username)}\r\n                />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    )\r\n})","\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Icon, Image } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profiles';\r\nimport { Store } from '../../app/store/store';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileCard({profile}: Props) {\r\n    function truncateBio(bio:string|undefined):string{\r\n        if(!bio||bio.length==0)\r\n            return 'Bio not available';\r\n        if(bio.length>100)\r\n            return bio.slice(0, 100) + \"...\";\r\n        return bio;\r\n    }\r\n    const{profileStore}=Store();\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>{truncateBio(profile.bio)}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user' />\r\n                {profile.followersCount!=1?profile.followersCount+\"  followers\":profile.followersCount+\"  follower\"}\r\n            </Card.Content>\r\n            <FollowButton profile={profile}/>\r\n        </Card>\r\n    )\r\n})","\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Image, List, Popup } from 'semantic-ui-react';\r\nimport { Profile } from '../../../app/models/profiles';\r\nimport ProfileCard from '../../profile/ProfileCard';\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n}\r\nconst styles = {\r\n    borderColor: 'orange',\r\n    borderWidth: 3,\r\n}\r\nexport default observer(function ActivityListItemAttendee({ attendees }: Props) {\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <Popup\r\n                    hoverable\r\n                    key={attendee.username}\r\n                    trigger={\r\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\r\n                            <Image size='mini' circular src={attendee.image || '/assets/user.png'} \r\n                            bordered\r\n                            style={attendee.following?styles:null}/>\r\n                        </List.Item>\r\n                    }\r\n                >\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={attendee} />\r\n                    </Popup.Content>\r\n                </Popup>\r\n\r\n            ))}\r\n        </List>\r\n    )\r\n})","\r\nimport React from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\r\nimport { Activity } from '../../../app/models/activity';\r\nimport {format} from 'date-fns';\r\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default function ActivityListItem({ activity }: Props) {\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled &&\r\n                    <Label attached='top' color='red' content='Cancelled' style={{textAlign: 'center'}} />\r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image style={{marginBottom: 3}} size='tiny' circular src={activity.host?.image||'/assets/user.png'} />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>Hosted by <Link to={`/profiles/${activity.hostUsername}`}>{activity.host?.displayName}</Link></Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='orange'>\r\n                                        You are hosting this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                            {activity.isGoing && !activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='green'>\r\n                                        You are going to this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                    <Icon name='marker' /> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button \r\n                    as={Link}\r\n                    to={`/activities/${activity.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { Fragment, SyntheticEvent, useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { Button, Header, Item, Label, Segment } from \"semantic-ui-react\";\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { Store } from \"../../../app/store/store\";\r\nimport ActivityListItem from \"./ActivityListItem\";\r\n// interface Props{\r\n//     //submitting:boolean,\r\n//     //deleteActivity:(id:string)=>void,\r\n//     //activities:Activity[],\r\n//     //selectActivity:(id:string)=>void;\r\n// }\r\nexport default observer(function ActivityList(){\r\n    const {activityStore}=Store();\r\n    const {groupedActivities}=activityStore;\r\n    return(\r\n        <>\r\n            {groupedActivities.map(([group, activities]) => (\r\n                <Fragment key={group}>\r\n                    <Header sub color='teal'>\r\n                        {group}\r\n                    </Header>\r\n                    {activities.map(activity => (\r\n                        <ActivityListItem key={activity.id} activity={activity} />\r\n                    ))}\r\n                </Fragment>\r\n            ))}\r\n        </>\r\n    )\r\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport { Grid, List, Loader } from \"semantic-ui-react\";\r\nimport { VoidExpression } from \"typescript\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { PagingParams } from \"../../../app/models/pagination\";\r\nimport { Store } from \"../../../app/store/store\";\r\nimport ActivityDetails from \"../details/ActivityDetails\";\r\nimport ActivityForm from \"../form/ActivityForm\";\r\nimport ActivityFilters from \"./ActivityFilters\";\r\nimport ActivityList from \"./ActivityList\";\r\nimport ActivityListItemPlaceholder from \"./ActivityListItemPlaceholder\";\r\n\r\n// interface Props{\r\n//     submitting:boolean,\r\n//     loading:boolean,\r\n//     deleteActivity:(id:string)=>void,\r\n//     createOrEdit:(activity:Activity)=>void,\r\n//     activities:Activity[],\r\n//     selectedActivity:Activity|undefined,\r\n//     selectActivity:(id:string)=>void,\r\n//     cancelSelection:()=>void,\r\n//     editMode:boolean,\r\n//     openForm:(id:string)=>void,\r\n//     closeForm:()=>void;\r\n// }\r\n\r\nexport default observer(function ActivityDashboard(){\r\n    const {activityStore}=Store();\r\n    const {setPagingParams,pagination,getActivities}=activityStore;\r\n    const [loadingNext,setLoadingNext]=useState(false);\r\n    function handleGetNext(){\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage+1));\r\n        getActivities().then(()=>setLoadingNext(false));\r\n    }\r\n    useEffect(() => {\r\n        if(activityStore.activityRegistry.size<=1)\r\n            activityStore.getActivities();\r\n    }, [activityStore.activityRegistry.size,activityStore.getActivities])\r\n    return(\r\n        <>\r\n            <Grid>\r\n                <Grid.Column width='10'>\r\n                {(activityStore.loading&&!loadingNext?\r\n                \r\n                    <ActivityListItemPlaceholder></ActivityListItemPlaceholder>:\r\n                    <InfiniteScroll\r\n                            pageStart={0}\r\n                            loadMore={handleGetNext}\r\n                            hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                            initialLoad={false}\r\n                        >\r\n                            <ActivityList />\r\n                        </InfiniteScroll>)}\r\n                </Grid.Column>\r\n                <Grid.Column width='6'>\r\n                    <ActivityFilters/>\r\n                </Grid.Column>\r\n                {/* {activityStore.selectedActivity&&!activityStore.editMode&&<ActivityDetails/>} */}\r\n                {/* {activityStore.editMode&&<ActivityForm/>} */}\r\n                {/* </Grid.Column> */}\r\n                <Grid.Column width={10}>\r\n                <Loader active={loadingNext} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </>\r\n    )\r\n})","import React from \"react\";\r\nimport { Dimmer, Loader } from \"semantic-ui-react\";\r\ninterface Props{\r\n    inverted?:boolean;\r\n    content?:string;\r\n}\r\nexport default function LoadingComponent({inverted=true,content='Loading...'}:Props){\r\n    return(\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content}/>\r\n        </Dimmer>\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport { METHODS } from \"http\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\ninterface Props{\r\n    placeholder:string,\r\n    name:string,\r\n    label?:string,\r\n    type?:string\r\n}\r\nexport default function MyTextInput(props:Props){\r\n    const [field,meta]=useField(props.name);\r\n    return (\r\n    <Form.Field error={meta.touched&&!!meta.error}>\r\n        <label>{props.label}</label>\r\n        <input {...field} {...props} />\r\n        {meta.touched && meta.error ? (\r\n         <Label basic color=\"red\">{meta.error}</Label>\r\n       ) : null}\r\n    </Form.Field>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Button, Header, Label } from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { Store } from \"../../app/store/store\";\r\nexport default observer(function LoginForm(){\r\n    const {userStore}=Store();\r\n    return (\r\n        <Formik initialValues={{email:'',password:'',error:null}}\r\n        onSubmit={(values,{setErrors})=>{userStore.login(values).catch(error=>{setErrors({error:'Invalid email or password'});\r\n        console.log(error)})}}>\r\n            {({handleSubmit,isSubmitting,errors})=>(\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                <Header as='h2' content='Login to Reactivites' color='teal' textAlign='center' />\r\n                <MyTextInput name='email' placeholder='Email' />\r\n                <MyTextInput name='password' placeholder='Password' type='password' />\r\n                <ErrorMessage \r\n                        name='error' render={() => \r\n                        <Label style={{marginBottom: 10}} basic color='red' content={errors.error}/>}\r\n                    />\r\n                <Button positive content='Login' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React from 'react';\r\nimport { Message } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({errors}: Props) {\r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((err: any, i:any) => (\r\n                        <Message.Item key={i}>{err}</Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Button, Header, Label } from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { Store } from \"../../app/store/store\";\r\nimport * as Yup from 'yup'\r\nimport ValidationErrors from \"../errors/ValidationErrors\";\r\nexport default observer(function RegisterForm(){\r\n    const {userStore}=Store();\r\n    return (\r\n        <Formik initialValues={{email:'',displayName:'',username:'',password:'',error:null}}\r\n        validationSchema={Yup.object({\r\n            email:Yup.string().required().email(),\r\n            displayName:Yup.string().required(),\r\n            username:Yup.string().required(),\r\n            password:Yup.string().required(),\r\n        })}\r\n        onSubmit={(values,{setErrors})=>{userStore.register(values).catch(error=>{setErrors({error});\r\n        console.log(error)})}}>\r\n            {({handleSubmit,isSubmitting,dirty,isValid,errors})=>(\r\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\r\n                <Header as='h2' content='Register to Reactivites' color='teal' textAlign='center' />\r\n                <MyTextInput name='displayName' placeholder='DisplayName' />\r\n                <MyTextInput name='username' placeholder='Username' />\r\n                <MyTextInput name='email' placeholder='Email' />\r\n                <MyTextInput name='password' placeholder='Password' type='password' />\r\n                <ErrorMessage \r\n                        name='error' render={() => \r\n                        <ValidationErrors errors={errors.error}/>}\r\n                    />\r\n                <Button disabled={!dirty||!isValid} positive content='Register' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Container, Header, Image, Segment } from \"semantic-ui-react\";\r\nimport { Store } from \"../../app/store/store\";\r\nimport LoginForm from \"../users/LoginForm\";\r\nimport RegisterForm from \"../users/RegisterForm\";\r\nexport default observer(function HomePage() {\r\n    const {userStore,modalStore}=Store();\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead'>\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{marginBottom: 12}} />\r\n                    Reactivities\r\n                </Header>\r\n                {userStore.isLoggedIn ? (\r\n                    <>\r\n                        <Header as='h2' inverted content='Welcome to Reactivities' />\r\n                        <Button as={Link} to='/activities' size='huge' inverted>\r\n                            Go to Activities!\r\n                        </Button>\r\n                    </>\r\n\r\n                ) : (\r\n                    <>\r\n                    <Button onClick={()=>{modalStore.openModal(<LoginForm/>)}} size='huge' inverted>\r\n                            Login!\r\n                    </Button>\r\n                    <Button onClick={()=>{modalStore.openModal(<RegisterForm/>)}} size='huge' inverted>\r\n                        Register!\r\n                    </Button>\r\n                    </>\r\n                )}\r\n            </Container>\r\n        </Segment>\r\n    )\r\n})","import { formatDistanceToNow } from 'date-fns'\r\nimport { Field, FieldProps, Formik } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React,{useEffect} from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport {Segment, Header, Comment, Form, Button, Loader} from 'semantic-ui-react'\r\nimport { Activity } from '../../../app/models/activity'\r\nimport { Store } from '../../../app/store/store'\r\nimport * as Yup from 'yup';\r\nimport CommonStore from '../../../app/store/commonStore'\r\ninterface Props{\r\n    activityId:string\r\n}\r\nexport default observer(function ActivityDetailedChat({activityId}:Props) {\r\n    const {commentStore}=Store();\r\n    const{comments,createHubConnection,stopHubConnection,clearComments,addComment}=commentStore;\r\n    useEffect(() => {\r\n        if(activityId)\r\n            createHubConnection(activityId);\r\n        return()=>clearComments()\r\n    }, [commentStore,activityId])\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{ border: 'none' }}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Formik\r\n                    onSubmit={(values, { resetForm }) =>\r\n                        commentStore.addComment(values).then(() => resetForm())}\r\n                    initialValues={{ body: '' }}\r\n                    validationSchema={Yup.object({\r\n                        body: Yup.string().required()\r\n                    })}\r\n                >\r\n                    {({ isSubmitting, isValid, handleSubmit }) => (\r\n                        <Form className='ui form'>\r\n                            <Field name='body'>\r\n                                {(props: FieldProps) => (\r\n                                    <div style={{ position: 'relative' }}>\r\n                                        <Loader active={isSubmitting} />\r\n                                        <textarea\r\n                                            placeholder='Enter your comment (Enter to submit, SHIFT + enter for new line)'\r\n                                            rows={2}\r\n                                            {...props.field}\r\n                                            onKeyPress={e => {\r\n                                                if (e.key === 'Enter' && e.shiftKey) {\r\n                                                    return;\r\n                                                }\r\n                                                if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                    e.preventDefault();\r\n                                                    isValid && handleSubmit();\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\r\n                            <Comment.Content>\r\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\r\n                                    {comment.displayName}\r\n                                </Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{comment.body}</Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Item, Segment, Image, Label } from 'semantic-ui-react'\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { format } from 'date-fns';\r\nimport { Store } from '../../../app/store/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\r\n    const { activityStore: { updateAttendance,submitting, cancelActivityToggle } } = Store();\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{ padding: '0' }}>\r\n                {activity.isCancelled &&\r\n                    <Label style={{ position: 'absolute', zIndex: 1000, left: -14, top: 20 }}\r\n                        ribbon color='red' content='Cancelled' />\r\n                }\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{ color: 'white' }}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button\r\n                            color={activity.isCancelled ? 'green' : 'red'}\r\n                            floated='left'\r\n                            basic\r\n                            content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\r\n                            onClick={cancelActivityToggle}\r\n                            loading={submitting}\r\n                        />\r\n                        <Button as={Link}\r\n                            disabled={activity.isCancelled}\r\n                            to={`/manage/${activity.id}`}\r\n                            color='orange'\r\n                            floated='right'>\r\n                            Manage Event\r\n                        </Button>\r\n                    </>\r\n\r\n                ) : activity.isGoing ? (\r\n                    <Button loading={submitting} onClick={updateAttendance}>Cancel attendance</Button>\r\n                ) : (\r\n                    <Button disabled={activity.isCancelled}\r\n                        loading={submitting} onClick={updateAttendance} color='teal'>\r\n                            Join Activity\r\n                    </Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Segment, Grid, Icon } from 'semantic-ui-react'\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { format } from 'date-fns';\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({ activity }: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <span>\r\n                            {format(activity.date!,'dd MMM yyyy')}\r\n                        </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar({ activity: { attendees, host } }: Props) {\r\n    if (!attendees) return null;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => (\r\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\r\n                            {attendee.username === host?.username &&\r\n                                <Label\r\n                                    style={{ position: 'absolute' }}\r\n                                    color='orange'\r\n                                    ribbon='right'\r\n                                >\r\n                                    Host\r\n                                </Label>}\r\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                {attendee.following&&\r\n                                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { Button, Card, Grid, Icon, Image } from \"semantic-ui-react\";\r\nimport { VoidExpression } from \"typescript\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { Store } from \"../../../app/store/store\";\r\nimport ActivityDetailedChat from \"./ActivityDetailedChat\";\r\nimport ActivityDetailedHeader from \"./ActivityDetailedHeader\";\r\nimport ActivityDetailedInfo from \"./ActivityDetailedInfo\";\r\nimport ActivityDetailedSidebar from \"./ActivityDetailedSidebar\";\r\n// interface Props{\r\n//     //activity:Activity,\r\n//     //cancelSelection:()=>void,\r\n//     //openForm:(id:string)=>void;\r\n// }\r\nexport default observer(function ActivityDetails(){\r\n  const {activityStore}=Store();\r\n  const {selectedActivity,loadActivity,loading,cancelSelection}=activityStore;\r\n  const {id}=useParams<{id:string}>();\r\n  useEffect(() => {\r\n    if(id)\r\n      loadActivity(id);\r\n    return()=>cancelSelection();\r\n  }, [id,loadActivity,cancelSelection])\r\n  \r\n  if(!selectedActivity||loading) return <LoadingComponent/>\r\n    return(\r\n      <Grid>\r\n      <Grid.Column width={10}>\r\n          <ActivityDetailedHeader activity={selectedActivity} />\r\n          <ActivityDetailedInfo activity={selectedActivity} />\r\n          <ActivityDetailedChat activityId={selectedActivity.id}/>\r\n      </Grid.Column>\r\n      <Grid.Column width={6}>\r\n          <ActivityDetailedSidebar activity={selectedActivity}/>\r\n      </Grid.Column>\r\n  </Grid>\r\n    )\r\n})","import { useField } from \"formik\";\r\nimport { METHODS } from \"http\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\ninterface Props{\r\n    placeholder:string,\r\n    name:string,\r\n    label?:string\r\n    rows:number,\r\n}\r\nexport default function MyTextArea(props:Props){\r\n    const [field,meta]=useField(props.name);\r\n    return (\r\n    <Form.Field error={meta.touched&&!!meta.error}>\r\n        <label>{props.label}</label>\r\n        <textarea {...field} {...props} />\r\n        {meta.touched && meta.error ? (\r\n         <Label basic color=\"red\">{meta.error}</Label>\r\n       ) : null}\r\n    </Form.Field>\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport { METHODS } from \"http\";\r\nimport React from \"react\";\r\nimport { Form, Label, Select } from \"semantic-ui-react\";\r\ninterface Props{\r\n    placeholder:string,\r\n    name:string,\r\n    options:any\r\n    label?:string\r\n}\r\nexport default function MyTextInput(props:Props){\r\n    const [field,meta,helpers]=useField(props.name);\r\n    return (\r\n    <Form.Field error={meta.touched&&!!meta.error}>\r\n        <label>{props.label}</label>\r\n        <Select clearable\r\n        options={props.options}\r\n        value={field.value||null}\r\n        onChange={(e,d)=>helpers.setValue(d.value)}\r\n        onBlur={()=>helpers.setTouched(true)}/>\r\n        {meta.touched && meta.error ? (\r\n         <Label basic color=\"red\">{meta.error}</Label>\r\n       ) : null}\r\n    </Form.Field>\r\n    )\r\n}","export const categoryOptions=[{text:'Drinks', value:'drinks'},\r\n{text:'Culture', value:'culture'},\r\n{text:'Film', value:'film'},\r\n{text:'Food', value:'food'},\r\n{text:'Music', value:'music'},\r\n{text:'Travel', value:'travel'}]","import { Field, useField } from \"formik\";\r\nimport { METHODS } from \"http\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\nimport DatePicker,{ReactDatePickerProps} from 'react-datepicker';\r\ninterface Props{\r\n    placeholder:string,\r\n    name:string,\r\n    label?:string\r\n}\r\nexport default function MyDateInput(props:Partial<ReactDatePickerProps>){\r\n    const [field,meta,helpers]=useField(props.name!);\r\n    return (\r\n    <Form.Field error={meta.touched&&!!meta.error}>\r\n        <DatePicker\r\n        {...field}\r\n        {...props}\r\n        selected={(field.value&&new Date(field.value))||null}\r\n        onChange={val=>helpers.setValue(val)}\r\n        />\r\n        {meta.touched && meta.error ? (\r\n         <Label basic color=\"red\">{meta.error}</Label>\r\n       ) : null}\r\n    </Form.Field>\r\n    )\r\n}","import { v4 as uuid } from \"uuid\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React, { ChangeEvent, useEffect, useState } from \"react\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport { Button, Header, Segment } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { Activity, ActivityFormValues } from \"../../../app/models/activity\";\r\nimport { Store } from \"../../../app/store/store\";\r\nimport { Formik ,Form} from \"formik\";\r\nimport * as Yup from 'yup'\r\nimport MyTextInput from \"../../../app/common/form/MyTextInput\";\r\nimport MyTextArea from \"../../../app/common/form/MyTextArea\";\r\nimport MySelectInput from \"../../../app/common/form/MySelectInput\";\r\nimport { categoryOptions } from \"../../../app/common/options/categoryOptions\";\r\nimport MyDateInput from \"../../../app/common/form/MyDateInput\";\r\n// interface Props{\r\n//     submitting:boolean,\r\n//     createOrEdit:(activity:Activity)=>void,\r\n//     //selectedActivity:Activity|undefined,\r\n//     closeForm:()=>void;\r\n// }\r\nexport default observer(function ActivityForm(){\r\n    const history=useHistory();\r\n    const {activityStore}=Store();\r\n    const {id}=useParams<{id:string}>();\r\n    const[activity,SetActivity]=useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema=Yup.object({\r\n        title:Yup.string().required('The activity title is requird'),\r\n        description:Yup.string().required('The description title is requird'),\r\n        category:Yup.string().required('The category title is requird'),\r\n        date:Yup.string().required('The date title is requird').nullable(),\r\n        city:Yup.string().required('The city title is requird'),\r\n        venue:Yup.string().required('The venue title is requird'),\r\n    });\r\n    // if(activityStore.selectedActivity!=undefined){\r\n    //     initialState=activityStore.selectedActivity;\r\n    // }\r\n    //const[activity,SetActivity]=useState(initialState);\r\n    useEffect(() => {\r\n        if(id){\r\n            activityStore.loadActivity(id).then((activity)=>{\r\n                SetActivity(new ActivityFormValues(activity));\r\n            });   \r\n        } \r\n    }, [id,activityStore.loadActivity])\r\n    \r\n    // var handleChange=(event:ChangeEvent<HTMLInputElement|HTMLTextAreaElement>)=>{\r\n    //     const {value,name}=event.target;\r\n    //     SetActivity({...activity,[name]:value});\r\n    // }\r\n\r\n    var handleFormSubmit=(activity:ActivityFormValues)=>{\r\n        if(!activity.id){\r\n            let newActivity={...activity,id:uuid()};\r\n            activityStore.createActivity(newActivity).then(()=>{\r\n                history.push(`/activities/${newActivity.id}`);\r\n            });\r\n        }\r\n        else{\r\n            activityStore.editActivity(activity).then(()=>{\r\n                history.push(`/activities/${activity.id}`);\r\n            });\r\n        }\r\n    }\r\n    if(id&&activityStore.loading)\r\n        return <LoadingComponent/>\r\n    return(\r\n        <Segment clearing>\r\n            <Header content='Activity Details' sub color=\"teal\"/>\r\n            <Formik validationSchema={validationSchema} enableReinitialize initialValues={activity} onSubmit={(activity)=>handleFormSubmit(activity)}>\r\n            {({handleSubmit,isSubmitting,dirty,isValid})=>(\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                <MyTextInput placeholder='Title'  name='title' />\r\n                <MyTextArea rows={3} placeholder='Description'  name='description' />\r\n                <MySelectInput options={categoryOptions} placeholder='Category'  name='category' />\r\n                <MyDateInput \r\n                            placeholderText='Date'  \r\n                            name='date' \r\n                            showTimeSelect\r\n                            timeCaption='time'\r\n                            dateFormat='MMMM d, yyyy h:mm aa'\r\n                        />\r\n                <Header content='Location Details' sub color=\"teal\"/>\r\n                <MyTextInput placeholder='City'  name='city' />\r\n                <MyTextInput placeholder='Venue'  name='venue' />\r\n                <Button \r\n                disabled={isSubmitting||!dirty||!isValid}\r\n                loading={activityStore.submitting} floated=\"right\" positive type=\"submit\" content=\"Submit\"/>\r\n                <Button as={Link} to='/activities' floated=\"right\" type=\"button\" content=\"Cancel\"/>\r\n            </Form>\r\n            )}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n})","import React, { useState } from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n\r\n    function handleNotFound() {\r\n        axios.get('/buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get('buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get('buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get('buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get('activities/notaguid').catch(err => console.log(err));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post('activities', {}).catch(err => setErrors(err));\r\n    }\r\n    const [errors,setErrors]=useState<string[]>([]);\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors&&<ValidationErrors errors={errors}/>}\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Oops - we've looked everywhere and could not find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>\r\n                    Return to activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Container, Header, Segment } from 'semantic-ui-react';\r\nimport { Store } from '../../app/store/store';\r\n\r\nexport default observer(function ServerError() {\r\n    const {commonStore} = Store();\r\n    return (\r\n        <Container>\r\n            <Header as='h1' content='Server Error' />\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\r\n            {commonStore.error?.details &&\r\n                <Segment>\r\n                    <Header as='h4' content='Stack trace' color='teal' />\r\n                    <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\r\n                </Segment>\r\n                \r\n            }\r\n        </Container>\r\n    )\r\n})","\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { Store } from '../../store/store';\r\n\r\nexport default observer(function ModalContainer() {\r\n    const {modalStore} = Store();\r\n\r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})","import { Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React, { useState } from \"react\";\r\nimport { Button, Form, Header, Segment } from \"semantic-ui-react\";\r\nimport MyTextArea from \"../../app/common/form/MyTextArea\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { Store } from \"../../app/store/store\";\r\nimport * as Yup from 'yup';\r\nimport { isYieldExpression } from \"typescript\";\r\nimport LoadingComponent from \"../../app/layout/LoadingComponent\";\r\ninterface Props{\r\n    editMode:(flag:boolean)=>void;\r\n}\r\nexport default observer(function ProfileEditForm({editMode}:Props){\r\n    const {profileStore}=Store();\r\n    return(\r\n        <Segment clearing>\r\n            <Header content='Change Displayname' sub color=\"teal\"/>\r\n            <Formik initialValues={{username:profileStore.profile?.username,displayName:profileStore.profile?.displayName,bio:profileStore.profile?.bio}} validationSchema={Yup.object({\r\n                displayName:Yup.string().required(),\r\n                bio:Yup.string()\r\n            })} onSubmit={(obj)=>{profileStore.updateProfile(obj).then(()=>editMode(false))}}>\r\n            {({handleSubmit,isSubmitting,dirty,isValid})=>(\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                <MyTextInput placeholder='DisplayName'  name='displayName' />\r\n                <Header content='Change Bio' sub color=\"teal\"/>\r\n                <MyTextArea rows={10} placeholder='Bio' name='bio' />\r\n                <Button \r\n                disabled={isSubmitting||!dirty||!isValid}\r\n                loading={isSubmitting} floated=\"right\" positive type=\"submit\" content=\"Update\"/>\r\n                {/* <Button as={Link} to='/activities' floated=\"right\" type=\"button\" content=\"Cancel\"/> */}\r\n            </Form>\r\n            )}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n})","import React, {useState} from 'react';\r\nimport {Store} from \"../../app/store/store\";\r\nimport {Button, Grid, Header, Tab} from \"semantic-ui-react\";\r\n//import ProfileEditForm from \"./ProfileEditForm\";\r\nimport { observer } from 'mobx-react-lite';\r\nimport ProfileEditForm from './ProfileEditForm';\r\nexport default observer(function ProfileAbout() {\r\nconst {profileStore} = Store();\r\nconst {isCurrentUser, profile} = profileStore;\r\nconst [editMode, setEditMode] = useState(false);\r\nreturn (\r\n<Tab.Pane>\r\n<Grid>\r\n<Grid.Column width='16'>\r\n<Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\r\n{isCurrentUser && (\r\n<Button\r\nfloated='right'\r\nbasic\r\ncontent={editMode ? 'Cancel' : 'Edit Profile'}\r\nonClick={() => setEditMode(!editMode)}\r\n/>\r\n)}\r\n</Grid.Column>\r\n<Grid.Column width='16'>\r\n{editMode ? <ProfileEditForm editMode={setEditMode} /> :\r\n<span style={{whiteSpace: 'pre-wrap'}}>{profile?.bio}</span> }\r\n</Grid.Column>\r\n</Grid>\r\n</Tab.Pane>\r\n)\r\n})","\r\nimport React, { SyntheticEvent, useEffect } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { UserActivity } from '../../app/models/profiles';\r\nimport { format } from 'date-fns';\r\nimport { Store } from \"../../app/store/store\";\r\n\r\nconst panes = [\r\n    { menuItem: 'Future Events', pane: { key: 'future' } },\r\n    { menuItem: 'Past Events', pane: { key: 'past' } },\r\n    { menuItem: 'Hosting', pane: { key: 'hosting' } }\r\n];\r\n\r\nexport default observer(function ProfileActivities() {\r\n    const { profileStore } = Store();\r\n    const {\r\n        loadUserActivities,\r\n        profile,\r\n        loadingActivities,\r\n        userActivities\r\n    } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadUserActivities(profile!.username);\r\n    }, [loadUserActivities, profile]);\r\n\r\n    const handleTabChange = (e:SyntheticEvent,data:TabProps) => {\r\n       loadUserActivities(profile!.username,panes[data.activeIndex as number].pane.key)\r\n    };\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar' content={'Activities'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities.map((activity: UserActivity) => (\r\n                            <Card\r\n                                as={Link}\r\n                                to={`/activities/${activity.id}`}\r\n                                key={activity.id}\r\n                            >\r\n                                <Image\r\n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                                    style={{ minHeight: 100, objectFit: 'cover' }}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header textAlign='center'>{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{format(new Date(activity.date), 'do LLL')}</div>\r\n                                        <div>{format(new Date(activity.date), 'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n});","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Grid, Header,Tab,Card } from \"semantic-ui-react\";\r\nimport { Store } from \"../../app/store/store\";\r\nimport ProfileCard from \"./ProfileCard\";\r\nexport default observer(function ProfileFollowings(){\r\n    const{profileStore}=Store();\r\n    return(\r\n        <Tab.Pane loading={profileStore.loadingFollowings}>\r\n            <Grid>\r\n                <Grid.Column width='16'>\r\n                    <Header\r\n                        floated='left'\r\n                        icon='user'\r\n                        content={profileStore.activeTab === 3 ? `People following ${profileStore.profile!.displayName}` : `People ${profileStore.profile?.displayName} is following`}\r\n                    />\r\n                </Grid.Column>\r\n                <Grid.Column width='16'>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {profileStore.followings.map(profile => (\r\n                            <ProfileCard key={profile.username} profile={profile} />\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","\r\nimport React from 'react';\r\nimport { Cropper } from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props {\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props) {\r\n    return (\r\n        <Cropper \r\n            src={imagePreview}\r\n            style={{height: 200, width: '100%'}}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    )\r\n}","\r\nimport React, { useCallback } from 'react'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    setFiles: (files: any) => void;\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({setFiles}: Props) {\r\n    const dzStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadius: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center' as 'center',\r\n        height: 200\r\n    }\r\n\r\n    const dzActive = {\r\n        borderColor: 'green'\r\n    }\r\n\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n            preview: URL.createObjectURL(file)\r\n        })))\r\n    }, [setFiles])\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\r\n\r\n    return (\r\n        <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles} >\r\n            <input {...getInputProps()} />  \r\n            <Icon name='upload' size='huge' />\r\n            <Header content='Drop image here' />\r\n        </div>\r\n    )\r\n}","\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Button, Grid, Header } from 'semantic-ui-react';\r\nimport PhotoWidgetCropper from './photoWidgetCropper';\r\nimport PhotoWidgetDropzone from './photoWidgetDropzone';\r\n//import PhotoWidgetCropper from './PhotoWidgetCropper';\r\n//import PhotoWidgetDropzone from './PhotoWidgetDropzone';\r\n\r\ninterface Props {\r\n    loading: boolean;\r\n    uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\nexport default function PhotoUploadWidget({loading, uploadPhoto}: Props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\r\n        }\r\n    }, [files])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 2 - Resize image' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\r\n                {files && files.length > 0 &&\r\n                    <>\r\n                        <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\r\n                        <Button.Group widths={2}>\r\n                            <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                            <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                        </Button.Group>\r\n                    </>}\r\n\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","\r\nimport { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent, useState } from 'react';\r\nimport { Button, Card, Grid, Header, Image, Tab } from 'semantic-ui-react';\r\nimport PhotoUploadWidget from '../../app/common/imageUpload/photoUploadWidget';\r\n//import PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget';\r\nimport { Photo, Profile } from '../../app/models/profiles';\r\nimport { Store } from '../../app/store/store';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfilePhotos({ profile }: Props) {\r\n    const { profileStore: { isCurrentUser, uploadPhoto, \r\n            uploading, loading, setMainPhoto, deletePhoto } } = Store();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n\r\n    function handlePhotoUpload(file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    {isCurrentUser && (\r\n                        <Button floated='right' basic\r\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\r\n                    ) : (\r\n                            <Card.Group itemsPerRow={5}>\r\n                                {profile.photos?.map(photo => (\r\n                                    <Card key={photo.id}>\r\n                                        <Image src={photo.url} />\r\n                                        {isCurrentUser && (\r\n                                            <Button.Group fluid widths={2}>\r\n                                                <Button \r\n                                                    basic\r\n                                                    color='green'\r\n                                                    content='Main'\r\n                                                    name={'main' + photo.id}\r\n                                                    disabled={photo.isMain}\r\n                                                    loading={target === 'main' + photo.id && loading}\r\n                                                    onClick={e => handleSetMainPhoto(photo, e)}\r\n                                                />\r\n                                                <Button \r\n                                                    basic \r\n                                                    color='red' \r\n                                                    icon='trash' \r\n                                                    loading={target === photo.id && loading}\r\n                                                    onClick={e => handleDeletePhoto(photo, e)}\r\n                                                    disabled={photo.isMain}\r\n                                                    name={photo.id}\r\n                                                />\r\n                                            </Button.Group>\r\n                                        )}\r\n                                    </Card>\r\n                                ))}\r\n                            </Card.Group>\r\n                        )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Tab } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profiles';\r\nimport { Store } from '../../app/store/store';\r\nimport ProfileAbout from './ProfileAbout';\r\nimport ProfileActivities from './ProfileActivities';\r\nimport ProfileFollowings from './ProfileFollowings';\r\nimport ProfilePhotos from './ProfilePhotos';\r\n//import ProfilePhotos from './ProfilePhotos';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileContent({profile}: Props) {\r\n    const {profileStore}=Store();\r\n    const panes = [\r\n        {menuItem: 'About', render: () => <ProfileAbout/>},\r\n        {menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} />},\r\n        {menuItem: 'Events', render: () => <ProfileActivities/>},\r\n        {menuItem: 'Followers', render: () => <ProfileFollowings/>},\r\n        {menuItem: 'Following', render: () => <ProfileFollowings/>},\r\n    ];\r\n\r\n    return (\r\n        <Tab \r\n            menu={{fluid: true, vertical: true}}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    )\r\n})","\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Divider, Grid, Header, Item, Reveal, Segment, Statistic } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profiles';\r\nimport { Store } from '../../app/store/store';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileHeader({profile}: Props) {\r\n    //const{userStore}=Store();\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile}/>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","\r\nimport { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../app/layout/LoadingComponent';\r\nimport { Store } from '../../app/store/store';\r\nimport ProfileContent from './ProfileContent';\r\nimport ProfileHeader from './ProfileHeader';\r\n\r\nexport default observer(function ProfilePage() {\r\n    const { username } = useParams<{ username: string }>();\r\n    const { profileStore } = Store();\r\n    const { loadingProfile, loadProfile, profile } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n        return()=>{profileStore.setActiveTab(0);profileStore.profile=null}\r\n    }, [loadProfile, username])\r\n\r\n    if (loadingProfile) return <LoadingComponent content='Loading profile...' />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile &&\r\n                    <>\r\n                        <ProfileHeader profile={profile} />\r\n                        <ProfileContent profile={profile} />\r\n                    </>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\r\nimport { Store } from \"../store/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\r\n    const {userStore: {isLoggedIn}} = Store();\r\n    return (\r\n        <Route \r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n        />\r\n    )\r\n}","import React, { useState,useEffect } from 'react';\n// import { useEffect } from 'react';\nimport './styles.css'\nimport axios from 'axios';\nimport '../models/activity'\nimport { Container, Header, List } from 'semantic-ui-react';\nimport { Activity } from '../models/activity';\nimport NavBar from './Navbar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport {v4 as uuid} from 'uuid';\nimport agent from '../api/agent';\nimport LoadingComponent from './LoadingComponent';\nimport { Store } from '../store/store';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router-dom';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport TestErrors from '../../features/errors/TestError';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport LoginForm from '../../features/users/LoginForm';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profile/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\nfunction App() {\n  const {commonStore,userStore}=Store();\n  const location=useLocation();\n  // const [activities,SetActivities]=useState<Activity[]>([]);\n  // const [selectedActivity,setSelectedActivity]=useState<Activity|undefined>(undefined);\n  // const [loading,setLoading]=useState(true);\n  // const [editMode,setEditMode]=useState(false);\n  // const [submitting,setSubmitting]=useState(false);\n  // const handleFormOpen=(id?:string)=>{\n  //   id?selectActivity(id):cancelSelection();\n  //   setEditMode(true);\n  // }\n\n  // const handleFormClose=()=>{\n  //   setEditMode(false);\n  // }\n\n  // const selectActivity=(id?:string)=>{\n  //   setSelectedActivity(activities.find(x=>x.id===id));\n  // }\n  // const cancelSelection=()=>{\n  //   setSelectedActivity(undefined);\n  // }\n  // const createorEditActivity=(activity:Activity)=>{\n  //     setSubmitting(true);\n  //     if(!activity.id){\n  //       activity.id=uuid()\n  //       agent.Activities.create(activity).then(()=>{\n  //         SetActivities([...activities,activity]);\n  //         setEditMode(false);\n  //       setSelectedActivity(activity);\n  //       setSubmitting(false);\n  //       })\n  //     }\n  //     else{\n  //       agent.Activities.update(activity).then(()=>{\n  //         SetActivities([...activities.filter(x=>x.id!==activity.id),activity]);\n  //         setEditMode(false);\n  //       setSelectedActivity(activity);\n  //       setSubmitting(false);\n  //       })\n  //     }\n  // }\n  // const deleteActivity=(id:string)=>{\n  //   setSubmitting(true);\n  //   agent.Activities.delete(id).then(()=>{\n  //     SetActivities([...activities.filter(x=>x.id!==id)]);\n  //     setSubmitting(false);\n  //   })\n  // }\n  useEffect(() => {\n    var token=commonStore.token;\n    if(token){\n      userStore.getLoggedInUser().finally(()=>{\n        commonStore.setAppLoaded();\n      })\n    }\n    else{\n      commonStore.setAppLoaded();\n    }\n  }, [commonStore,userStore])\n  \n  if(!commonStore.apploaded) return <LoadingComponent/>\n  return (\n    <>\n      <ToastContainer position='bottom-right' hideProgressBar/>\n      <ModalContainer/>\n      <Route exact path='/' component={HomePage}/>\n      <Route path='/(.+)' render={()=>(\n        <>\n        <NavBar/>\n        <Container style={{marginTop:'7em'}}>\n          <Switch>\n            <Route exact path='/' component={HomePage}/> \n            <PrivateRoute exact path='/activities' component={ActivityDashboard}/>\n            <PrivateRoute exact path='/activities/:id' component={ActivityDetails}/>\n            <PrivateRoute exact path='/profiles/:username' component={ProfilePage}/>\n            <PrivateRoute key={location.key} exact path={['/create','/manage/:id']} component={ActivityForm}/>\n            <PrivateRoute exact path='/errors' component={TestErrors}/>\n            <Route exact path='/server-error' component={ServerError}/>\n            {/* <Route exact path='/login' component={LoginForm}/> */}\n            <Route component={NotFound}/>\n          </Switch>\n        </Container> \n        </>\n      )}/>\n    </>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './app/layout/styles.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-toastify/dist/ReactToastify.css';\nimport App from './app/layout/App';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/store/store';\nimport { Router } from 'react-router-dom';\nimport {createBrowserHistory} from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history=createBrowserHistory();\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop/>\n      <App />\n    </Router>\n    </StoreContext.Provider>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}